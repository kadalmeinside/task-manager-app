{
    "sourceFile": "components/CalendarViews.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755076624590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755076631022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,14 +22,10 @@\n \n // Helper to get assignee\n const getAssignee = (item: AppItem, users: User[]) => users.find(u => u.id === item.assigneeId);\n \n-const statusStyles: { [key in ItemStatus]: { text: string, bg: string } } = {\n-    [ItemStatus.TODO]: { text: 'text-amber-800', bg: 'bg-amber-100' },\n-    [ItemStatus.IN_PROGRESS]: { text: 'text-blue-800', bg: 'bg-blue-100' },\n-    [ItemStatus.COMPLETED]: { text: 'text-green-800', bg: 'bg-green-100' },\n-};\n \n+\n // TaskCard Component (Used by Date View)\n interface TaskCardProps {\n   item: AppItem;\n   users: User[];\n"
                },
                {
                    "date": 1755076769442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,388 @@\n+import React, { useMemo } from 'react';\n+import { format } from 'date-fns/format';\n+import { addDays } from 'date-fns/addDays';\n+import { subDays } from 'date-fns/subDays';\n+import { isSameDay } from 'date-fns/isSameDay';\n+import { isWithinInterval } from 'date-fns/isWithinInterval';\n+import { startOfMonth } from 'date-fns/startOfMonth';\n+import { endOfMonth } from 'date-fns/endOfMonth';\n+import { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\n+import { startOfWeek } from 'date-fns/startOfWeek';\n+import { endOfWeek } from 'date-fns/endOfWeek';\n+import { isSameMonth } from 'date-fns/isSameMonth';\n+import { differenceInDays } from 'date-fns/differenceInDays';\n+import { isAfter } from 'date-fns/isAfter';\n+import { isBefore } from 'date-fns/isBefore';\n+import { areIntervalsOverlapping } from 'date-fns/areIntervalsOverlapping';\n+import { startOfDay } from 'date-fns/startOfDay';\n+import { endOfDay } from 'date-fns/endOfDay';\n+import type { AppItem, User, Task } from '../types';\n+import { ItemType, ItemStatus } from '../types';\n+import { ChevronLeftIcon, ChevronRightIcon, CheckCircleIcon } from './Icons';\n+\n+// Helper to get assignee\n+const getAssignee = (item: AppItem, users: User[]) => users.find(u => u.id === item.assigneeId);\n+\n+const statusStyles: { [key in ItemStatus]: { text: string, bg: string } } = {\n+    [ItemStatus.TODO]: { text: 'text-amber-800', bg: 'bg-amber-100' },\n+    [ItemStatus.IN_PROGRESS]: { text: 'text-blue-800', bg: 'bg-blue-100' },\n+    [ItemStatus.COMPLETED]: { text: 'text-green-800', bg: 'bg-green-100' },\n+};\n+\n+// TaskCard Component (Used by Date View)\n+interface TaskCardProps {\n+  item: AppItem;\n+  users: User[];\n+  onSelectItem: (item: AppItem) => void;\n+}\n+const TaskCard: React.FC<TaskCardProps> = ({ item, users, onSelectItem }) => {\n+  const assignee = getAssignee(item, users);\n+  const statusStyle = statusStyles[item.status];\n+\n+  const getDateInfo = () => {\n+    if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n+      const task = item as Task;\n+      if (task.completedOn) {\n+        const overdueText = task.overdueDays && task.overdueDays > 0 \n+          ? <span className=\"text-red-500 font-medium ml-2\">({task.overdueDays}d late)</span> \n+          : null;\n+        return (\n+          <span className=\"flex items-center\">\n+            Completed: {format(task.completedOn, 'MMM d')}\n+            {overdueText}\n+          </span>\n+        );\n+      }\n+    }\n+    if (item.status !== ItemStatus.COMPLETED && isBefore(item.dueDate, startOfDay(new Date()))) {\n+        return <span className=\"text-red-600 font-medium\">Due: {format(item.dueDate, 'MMM d')}</span>;\n+    }\n+    return <span>Due: {format(item.dueDate, 'MMM d')}</span>;\n+  };\n+\n+  return (\n+    <div \n+        className=\"bg-surface-card border border-border-main rounded-lg p-4 flex items-center gap-4 transition-all hover:border-brand-primary cursor-pointer shadow-sm hover:shadow-md\"\n+        onClick={() => onSelectItem(item)}\n+    >\n+      <div className=\"flex-grow\">\n+        <div className=\"flex items-center gap-2\">\n+            <p className={`font-medium ${item.status === ItemStatus.COMPLETED ? 'line-through text-text-secondary' : 'text-text-primary'}`}>{item.title}</p>\n+            {item.status === ItemStatus.COMPLETED && <CheckCircleIcon className=\"w-5 h-5 text-green-500 shrink-0\" />}\n+        </div>\n+        <div className=\"text-sm text-text-secondary flex items-center gap-4 mt-1\">\n+          {getDateInfo()}\n+          {assignee && <span>To: {assignee.name}</span>}\n+          {item.type === ItemType.PROJECT && <span className=\"text-xs font-semibold bg-brand-secondary text-white px-2 py-0.5 rounded-full\">Project</span>}\n+        </div>\n+      </div>\n+      <div className={`px-2 py-1 rounded-full text-xs font-semibold ${statusStyle.bg} ${statusStyle.text}`}>\n+          {item.status}\n+      </div>\n+    </div>\n+  );\n+};\n+\n+\n+// Date View Component (with 5-day Slider)\n+interface DateViewProps {\n+  items: AppItem[];\n+  users: User[];\n+  currentDate: Date;\n+  onSelectItem: (item: AppItem) => void;\n+  onVisibleDateChange: (date: Date) => void;\n+}\n+\n+export const DateView: React.FC<DateViewProps> = ({ items, users, currentDate, onSelectItem, onVisibleDateChange }) => {\n+    const todayStart = useMemo(() => startOfDay(new Date()), []);\n+    \n+    const overdueItems = useMemo(() => {\n+        return items\n+            .filter(item => \n+                item.status !== ItemStatus.COMPLETED && \n+                isBefore(item.dueDate, todayStart)\n+            )\n+            .sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n+    }, [items, todayStart]);\n+\n+    const tasksForSelectedDay = useMemo(() => {\n+        return items\n+        .filter(item => {\n+            const isOverdue = item.status !== ItemStatus.COMPLETED && isBefore(item.dueDate, todayStart);\n+            if (isOverdue) return false;\n+            \n+            // If task is completed, show it on its completion date\n+            if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n+                const task = item as Task;\n+                if (task.completedOn) {\n+                    return isSameDay(currentDate, task.completedOn);\n+                }\n+            }\n+            \n+            // Otherwise, show it if it's active during the current date\n+            return isWithinInterval(currentDate, { start: startOfDay(item.createdAt), end: item.dueDate });\n+        })\n+        .sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n+    }, [items, currentDate, todayStart]);\n+\n+  const handleDateChange = (newDate: Date) => {\n+    onVisibleDateChange(newDate);\n+  };\n+\n+  const displayedDates = useMemo(() => {\n+    return Array.from({ length: 5 }, (_, i) => addDays(currentDate, i - 2));\n+  }, [currentDate]);\n+\n+  return (\n+    <div className=\"h-full flex flex-col bg-surface-main\">\n+      {/* Header with 5-day slider navigation */}\n+      <div className=\"p-4 bg-surface-card/50 border-b border-border-main shrink-0\">\n+        <div className=\"flex items-center justify-between mb-4\">\n+          <h2 className=\"text-lg font-semibold text-text-primary\">\n+            {format(currentDate, 'EEEE, MMMM d')}\n+          </h2>\n+          <button onClick={() => handleDateChange(new Date())} className=\"text-sm font-medium text-text-secondary hover:text-text-primary px-3 py-1 border border-border-main rounded-lg hover:bg-surface-card\">\n+            Today\n+          </button>\n+        </div>\n+        <div className=\"flex items-center gap-2\">\n+          <button onClick={() => handleDateChange(subDays(currentDate, 1))} className=\"p-2 rounded-full hover:bg-surface-card\" aria-label=\"Previous Day\">\n+            <ChevronLeftIcon className=\"w-6 h-6 text-text-secondary\" />\n+          </button>\n+          \n+          <div className=\"flex-grow grid grid-cols-5 gap-2\">\n+            {displayedDates.map((day) => {\n+              const isSelected = isSameDay(day, currentDate);\n+              const isToday = isSameDay(day, new Date());\n+              \n+              return (\n+                <button\n+                  key={day.toISOString()}\n+                  onClick={() => handleDateChange(day)}\n+                  className={`flex flex-col items-center justify-center p-2 rounded-lg transition-colors ${\n+                    isSelected\n+                      ? 'bg-brand-primary text-white'\n+                      : 'hover:bg-surface-card text-text-secondary'\n+                  }`}\n+                >\n+                  <span className=\"text-xs font-semibold uppercase\">{format(day, 'EEE')}</span>\n+                  <span className={`text-lg font-bold ${isToday && !isSelected ? 'text-brand-primary' : ''}`}>{format(day, 'd')}</span>\n+                </button>\n+              );\n+            })}\n+          </div>\n+\n+          <button onClick={() => handleDateChange(addDays(currentDate, 1))} className=\"p-2 rounded-full hover:bg-surface-card\" aria-label=\"Next Day\">\n+            <ChevronRightIcon className=\"w-6 h-6 text-text-secondary\" />\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Content Area */}\n+      <div className=\"flex-grow overflow-y-auto px-4 md:px-6 py-4\">\n+        {overdueItems.length > 0 && (\n+            <div className=\"mb-6\">\n+                <h3 className=\"text-base font-semibold text-red-600 mb-2 uppercase tracking-wider\">Overdue</h3>\n+                <div className=\"space-y-3\">\n+                    {overdueItems.map(item => <TaskCard key={item.id} item={item} users={users} onSelectItem={onSelectItem} />)}\n+                </div>\n+            </div>\n+        )}\n+\n+        {overdueItems.length > 0 && tasksForSelectedDay.length > 0 && <hr className=\"border-t border-border-main my-6\" />}\n+\n+        {tasksForSelectedDay.length > 0 && (\n+          <div>\n+            <h3 className=\"text-base font-semibold text-text-primary mb-3 uppercase tracking-wider\">\n+                Tasks for {format(currentDate, 'MMMM d')}\n+            </h3>\n+\n+            <div className=\"space-y-3\">\n+              {tasksForSelectedDay.map(item => <TaskCard key={item.id} item={item} users={users} onSelectItem={onSelectItem} />)}\n+            </div>\n+          </div>\n+        )}\n+\n+        {tasksForSelectedDay.length === 0 && overdueItems.length === 0 && (\n+            <div className=\"text-center py-12 border border-dashed border-border-main rounded-lg bg-surface-card/30 mt-4\">\n+              <p className=\"text-text-secondary\">No tasks scheduled for this day.</p>\n+            </div>\n+        )}\n+      </div>\n+    </div>\n+  );\n+};\n+\n+\n+// --- Month View ---\n+interface MonthViewProps {\n+  items: AppItem[];\n+  users: User[];\n+  currentDate: Date;\n+  onSelectItem: (item: AppItem) => void;\n+}\n+\n+const getEffectiveInterval = (item: AppItem): { start: Date, end: Date } => {\n+    if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n+        const task = item as Task;\n+        // A completed task is a single-day event.\n+        const effectiveDate = startOfDay(task.completedOn || item.dueDate);\n+        return { start: effectiveDate, end: endOfDay(effectiveDate) };\n+    }\n+    // For all other tasks, normalize the interval to full days.\n+    return { start: startOfDay(item.createdAt), end: endOfDay(item.dueDate) };\n+};\n+\n+export const MonthView: React.FC<MonthViewProps> = ({ items, currentDate, onSelectItem }) => {\n+  const firstDayOfMonth = startOfMonth(currentDate);\n+  const lastDayOfMonth = endOfMonth(currentDate);\n+\n+  const daysInMonth = eachDayOfInterval({\n+    start: startOfWeek(firstDayOfMonth),\n+    end: endOfWeek(lastDayOfMonth),\n+  });\n+  \n+  const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n+  \n+  const weeks = useMemo(() => {\n+    const dayChunks = [];\n+    for (let i = 0; i < daysInMonth.length; i += 7) {\n+        dayChunks.push(daysInMonth.slice(i, i + 7));\n+    }\n+    return dayChunks;\n+  }, [daysInMonth]);\n+\n+  const weeklyLayouts = useMemo(() => {\n+    return weeks.map(week => {\n+        const weekStart = startOfDay(week[0]);\n+        const weekEnd = endOfDay(week[6]);\n+\n+        const weekItems = items\n+            .filter(item => areIntervalsOverlapping(getEffectiveInterval(item), { start: weekStart, end: weekEnd }))\n+            .sort((a, b) => {\n+                const aInterval = getEffectiveInterval(a);\n+                const bInterval = getEffectiveInterval(b);\n+                const startDiff = differenceInDays(aInterval.start, bInterval.start);\n+                if (startDiff !== 0) return startDiff;\n+                const durationDiff = differenceInDays(bInterval.end, bInterval.start) - differenceInDays(aInterval.end, aInterval.start);\n+                return durationDiff;\n+            });\n+\n+        const itemSlots = new Map<string, number>();\n+        const occupiedSlots: { start: Date, end: Date }[][] = [];\n+\n+        weekItems.forEach(item => {\n+            const itemInterval = getEffectiveInterval(item);\n+            let slotIndex = 0;\n+            while(true) {\n+                if (!occupiedSlots[slotIndex]) {\n+                    occupiedSlots[slotIndex] = [];\n+                }\n+                const collision = occupiedSlots[slotIndex].some(placedInterval =>\n+                    areIntervalsOverlapping(itemInterval, placedInterval, { inclusive: true })\n+                );\n+                if (!collision) {\n+                    occupiedSlots[slotIndex].push(itemInterval);\n+                    itemSlots.set(item.id, slotIndex);\n+                    break;\n+                }\n+                slotIndex++;\n+            }\n+        });\n+\n+        const layout = weekItems.map(item => {\n+            const { start: itemStart, end: itemEnd } = getEffectiveInterval(item);\n+            const start = isAfter(itemStart, weekStart) ? itemStart : weekStart;\n+            const end = isBefore(itemEnd, weekEnd) ? itemEnd : weekEnd;\n+            const duration = differenceInDays(end, start) + 1;\n+            const offset = differenceInDays(start, weekStart);\n+\n+            return {\n+                item,\n+                slot: itemSlots.get(item.id) || 0,\n+                duration: duration > 0 ? duration : 1,\n+                offset: offset >= 0 ? offset : 0,\n+            };\n+        });\n+        \n+        return {\n+            weekDays: week,\n+            layout,\n+            rowCount: occupiedSlots.length || 1\n+        };\n+    });\n+  }, [weeks, items]);\n+\n+  return (\n+    <div className=\"p-4 md:p-6 flex flex-col bg-surface-card h-full\">\n+        {/* Weekday Header */}\n+        <div className=\"grid grid-cols-7 shrink-0\">\n+          {weekdays.map(day => (\n+            <div key={day} className=\"text-center font-medium text-text-secondary text-sm py-2 border-b border-r border-border-main last:border-r-0 bg-surface-card\">{day}</div>\n+          ))}\n+        </div>\n+\n+        {/* Calendar Body */}\n+        <div className=\"flex-grow flex flex-col\">\n+            {weeklyLayouts.map(({ weekDays, layout, rowCount }, weekIndex) => (\n+                // Each week row has uniform height (flex-1) and scrolls internally\n+                <div \n+                    key={weekIndex}\n+                    className=\"relative border-b border-border-main flex-1 overflow-y-auto\"\n+                >\n+                    {/* A tall inner \"canvas\" that holds all items. Its height is dynamic. */}\n+                    <div className=\"relative\" style={{ minHeight: `calc(1.75rem + ${rowCount * 1.85}rem)` }}>\n+                        {/* Background day cells */}\n+                        <div className=\"grid grid-cols-7 absolute inset-0\">\n+                            {weekDays.map((day) => {\n+                                const isCurrentMonth = isSameMonth(day, currentDate);\n+                                return (\n+                                    <div key={day.toString()} className={`flex-1 border-r border-border-main last:border-r-0 ${isCurrentMonth ? '' : 'bg-surface-main'}`}></div>\n+                                );\n+                            })}\n+                        </div>\n+                        \n+                        {/* Day numbers (part of the scrollable canvas) */}\n+                        <div className=\"grid grid-cols-7 relative\">\n+                            {weekDays.map(day => {\n+                                const isToday = isSameDay(day, new Date());\n+                                const isCurrentMonth = isSameMonth(day, currentDate);\n+                                return (\n+                                    <div key={day.toString()} className=\"flex-1 p-1.5\">\n+                                         <div className={`text-xs font-semibold ${isToday ? 'bg-brand-primary text-white rounded-full w-6 h-6 flex items-center justify-center' : isCurrentMonth ? 'text-text-primary' : 'text-text-secondary'}`}>\n+                                            {format(day, 'd')}\n+                                        </div>\n+                                    </div>\n+                                );\n+                            })}\n+                        </div>\n+                        \n+                        {/* Positioned task items */}\n+                        {layout.map(({ item, slot, duration, offset }) => (\n+                            <div \n+                                key={item.id}\n+                                className=\"absolute h-6 rounded text-white text-xs font-medium flex items-center px-2 overflow-hidden truncate cursor-pointer hover:ring-2 ring-slate-400\"\n+                                onClick={() => onSelectItem(item)}\n+                                title={item.title}\n+                                style={{\n+                                    backgroundColor: item.color,\n+                                    opacity: item.status === ItemStatus.COMPLETED ? 0.7 : 1,\n+                                    top: `calc(1.75rem + ${slot * 1.85}rem)`,\n+                                    left: `calc(${(offset / 7) * 100}%)`,\n+                                    width: `calc(${(duration / 7) * 100}% - 8px)`,\n+                                    zIndex: 10 + slot,\n+                                }}\n+                            >\n+                                {item.status === ItemStatus.COMPLETED && <CheckCircleIcon className=\"w-4 h-4 text-white shrink-0 mr-1\" />}\n+                                <span className={`flex-grow truncate ${item.status === ItemStatus.COMPLETED ? 'line-through' : ''}`}>\n+                                {item.title}\n+                                </span>\n+                            </div>\n+                        ))}\n+                    </div>\n+                </div>\n+            ))}\n+        </div>\n+    </div>\n+  );\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755078913666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,434 @@\n+import React, { useMemo } from 'react';\n+import { format } from 'date-fns/format';\n+import { addDays } from 'date-fns/addDays';\n+import { subDays } from 'date-fns/subDays';\n+import { isSameDay } from 'date-fns/isSameDay';\n+import { isWithinInterval } from 'date-fns/isWithinInterval';\n+import { startOfMonth } from 'date-fns/startOfMonth';\n+import { endOfMonth } from 'date-fns/endOfMonth';\n+import { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\n+import { startOfWeek } from 'date-fns/startOfWeek';\n+import { endOfWeek } from 'date-fns/endOfWeek';\n+import { isSameMonth } from 'date-fns/isSameMonth';\n+import { differenceInDays } from 'date-fns/differenceInDays';\n+import { isAfter } from 'date-fns/isAfter';\n+import { isBefore } from 'date-fns/isBefore';\n+import { areIntervalsOverlapping } from 'date-fns/areIntervalsOverlapping';\n+import { startOfDay } from 'date-fns/startOfDay';\n+import { endOfDay } from 'date-fns/endOfDay';\n+import type { AppItem, User, Task, Project } from '../types';\n+import { ItemType, ItemStatus } from '../types';\n+import { ChevronLeftIcon, ChevronRightIcon, CheckCircleIcon, ListIcon } from './Icons';\n+\n+// Helper to get assignee\n+const getAssignee = (item: AppItem, users: User[]) => users.find(u => u.id === item.assigneeId);\n+const getProject = (projectId: string, allItems: AppItem[]) => allItems.find(i => i.id === projectId) as Project | undefined;\n+\n+const statusStyles: { [key in ItemStatus]: { text: string, bg: string } } = {\n+    [ItemStatus.TODO]: { text: 'text-amber-800', bg: 'bg-amber-100' },\n+    [ItemStatus.IN_PROGRESS]: { text: 'text-blue-800', bg: 'bg-blue-100' },\n+    [ItemStatus.COMPLETED]: { text: 'text-green-800', bg: 'bg-green-100' },\n+};\n+\n+// TaskCard Component (Used by Date View)\n+interface TaskCardProps {\n+  item: AppItem;\n+  users: User[];\n+  onSelectItem: (item: AppItem) => void;\n+}\n+const TaskCard: React.FC<TaskCardProps> = ({ item, users, onSelectItem }) => {\n+  const assignee = getAssignee(item, users);\n+  const statusStyle = statusStyles[item.status];\n+\n+  const getDateInfo = () => {\n+    if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n+      const task = item as Task;\n+      if (task.completedOn) {\n+        const overdueText = task.overdueDays && task.overdueDays > 0 \n+          ? <span className=\"text-red-500 font-medium ml-2\">({task.overdueDays}d late)</span> \n+          : null;\n+        return (\n+          <span className=\"flex items-center\">\n+            Completed: {format(task.completedOn, 'MMM d')}\n+            {overdueText}\n+          </span>\n+        );\n+      }\n+    }\n+    if (item.status !== ItemStatus.COMPLETED && isBefore(item.dueDate, startOfDay(new Date()))) {\n+        return <span className=\"text-red-600 font-medium\">Due: {format(item.dueDate, 'MMM d')}</span>;\n+    }\n+    return <span>Due: {format(item.dueDate, 'MMM d')}</span>;\n+  };\n+\n+  return (\n+    <div \n+        className=\"bg-surface-card border border-border-main rounded-lg p-4 flex items-center gap-4 transition-all hover:border-brand-primary cursor-pointer shadow-sm hover:shadow-md\"\n+        onClick={() => onSelectItem(item)}\n+    >\n+      <div className=\"flex-grow\">\n+        <div className=\"flex items-center gap-2\">\n+            <p className={`font-medium ${item.status === ItemStatus.COMPLETED ? 'line-through text-text-secondary' : 'text-text-primary'}`}>{item.title}</p>\n+            {item.status === ItemStatus.COMPLETED && <CheckCircleIcon className=\"w-5 h-5 text-green-500 shrink-0\" />}\n+        </div>\n+        <div className=\"text-sm text-text-secondary flex items-center gap-4 mt-1\">\n+          {getDateInfo()}\n+          {assignee && <span>To: {assignee.name}</span>}\n+          {item.type === ItemType.PROJECT && <span className=\"text-xs font-semibold bg-brand-secondary text-white px-2 py-0.5 rounded-full\">Project</span>}\n+        </div>\n+      </div>\n+      <div className={`px-2 py-1 rounded-full text-xs font-semibold ${statusStyle.bg} ${statusStyle.text}`}>\n+          {item.status}\n+      </div>\n+    </div>\n+  );\n+};\n+\n+\n+// Date View Component (with 5-day Slider)\n+interface DateViewProps {\n+  items: AppItem[];\n+  users: User[];\n+  currentDate: Date;\n+  onSelectItem: (item: AppItem) => void;\n+  onVisibleDateChange: (date: Date) => void;\n+}\n+\n+export const DateView: React.FC<DateViewProps> = ({ items, users, currentDate, onSelectItem, onVisibleDateChange }) => {\n+    const todayStart = useMemo(() => startOfDay(new Date()), []);\n+    \n+    const overdueItems = useMemo(() => {\n+        return items\n+            .filter(item => \n+                item.status !== ItemStatus.COMPLETED && \n+                isBefore(item.dueDate, todayStart)\n+            )\n+            .sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n+    }, [items, todayStart]);\n+    \n+    const { groupedTasks, standaloneTasks } = useMemo(() => {\n+        const tasksForDay = items\n+            .filter(item => {\n+                const isOverdue = item.status !== ItemStatus.COMPLETED && isBefore(item.dueDate, todayStart);\n+                if (isOverdue) return false;\n+\n+                if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n+                    const task = item as Task;\n+                    return task.completedOn ? isSameDay(currentDate, task.completedOn) : false;\n+                }\n+                \n+                return isWithinInterval(currentDate, { start: startOfDay(item.createdAt), end: item.dueDate });\n+            })\n+            .sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n+\n+        const grouped = new Map<string, AppItem[]>();\n+        const standalone: AppItem[] = [];\n+\n+        tasksForDay.forEach(item => {\n+            if (item.type === ItemType.TASK && item.projectId) {\n+                if (!grouped.has(item.projectId)) {\n+                    grouped.set(item.projectId, []);\n+                }\n+                grouped.get(item.projectId)?.push(item);\n+            } else {\n+                standalone.push(item);\n+            }\n+        });\n+        \n+        return { groupedTasks: grouped, standaloneTasks: standalone };\n+    }, [items, currentDate, todayStart]);\n+\n+\n+  const handleDateChange = (newDate: Date) => {\n+    onVisibleDateChange(newDate);\n+  };\n+\n+  const displayedDates = useMemo(() => {\n+    return Array.from({ length: 5 }, (_, i) => addDays(currentDate, i - 2));\n+  }, [currentDate]);\n+\n+  const hasTasksForDay = groupedTasks.size > 0 || standaloneTasks.length > 0;\n+\n+  return (\n+    <div className=\"h-full flex flex-col bg-surface-main\">\n+      {/* Header with 5-day slider navigation */}\n+      <div className=\"p-4 bg-surface-card/50 border-b border-border-main shrink-0\">\n+        <div className=\"flex items-center justify-between mb-4\">\n+          <h2 className=\"text-lg font-semibold text-text-primary\">\n+            {format(currentDate, 'EEEE, MMMM d')}\n+          </h2>\n+          <button onClick={() => handleDateChange(new Date())} className=\"text-sm font-medium text-text-secondary hover:text-text-primary px-3 py-1 border border-border-main rounded-lg hover:bg-surface-card\">\n+            Today\n+          </button>\n+        </div>\n+        <div className=\"flex items-center gap-2\">\n+          <button onClick={() => handleDateChange(subDays(currentDate, 1))} className=\"p-2 rounded-full hover:bg-surface-card\" aria-label=\"Previous Day\">\n+            <ChevronLeftIcon className=\"w-6 h-6 text-text-secondary\" />\n+          </button>\n+          \n+          <div className=\"flex-grow grid grid-cols-5 gap-2\">\n+            {displayedDates.map((day) => {\n+              const isSelected = isSameDay(day, currentDate);\n+              const isToday = isSameDay(day, new Date());\n+              \n+              return (\n+                <button\n+                  key={day.toISOString()}\n+                  onClick={() => handleDateChange(day)}\n+                  className={`flex flex-col items-center justify-center p-2 rounded-lg transition-colors ${\n+                    isSelected\n+                      ? 'bg-brand-primary text-white'\n+                      : 'hover:bg-surface-card text-text-secondary'\n+                  }`}\n+                >\n+                  <span className=\"text-xs font-semibold uppercase\">{format(day, 'EEE')}</span>\n+                  <span className={`text-lg font-bold ${isToday && !isSelected ? 'text-brand-primary' : ''}`}>{format(day, 'd')}</span>\n+                </button>\n+              );\n+            })}\n+          </div>\n+\n+          <button onClick={() => handleDateChange(addDays(currentDate, 1))} className=\"p-2 rounded-full hover:bg-surface-card\" aria-label=\"Next Day\">\n+            <ChevronRightIcon className=\"w-6 h-6 text-text-secondary\" />\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Content Area */}\n+      <div className=\"flex-grow overflow-y-auto px-4 md:px-6 py-4\">\n+        {overdueItems.length > 0 && (\n+            <div className=\"mb-6\">\n+                <h3 className=\"text-base font-semibold text-red-600 mb-2 uppercase tracking-wider\">Overdue</h3>\n+                <div className=\"space-y-3\">\n+                    {overdueItems.map(item => <TaskCard key={item.id} item={item} users={users} onSelectItem={onSelectItem} />)}\n+                </div>\n+            </div>\n+        )}\n+\n+        {overdueItems.length > 0 && hasTasksForDay && <hr className=\"border-t border-border-main my-6\" />}\n+        \n+        {hasTasksForDay ? (\n+            <div>\n+                <h3 className=\"text-base font-semibold text-text-primary mb-3 uppercase tracking-wider\">\n+                    Tasks for {format(currentDate, 'MMMM d')}\n+                </h3>\n+                <div className=\"space-y-6\">\n+                    {/* Render tasks grouped by project */}\n+                    {Array.from(groupedTasks.entries()).map(([projectId, projectTasks]) => {\n+                        const project = getProject(projectId, items);\n+                        return (\n+                            <div key={projectId}>\n+                                <h4 className=\"font-bold text-text-primary mb-2 flex items-center gap-2\">\n+                                    <span className=\"w-2 h-2 rounded-full\" style={{backgroundColor: project?.color || '#ccc'}}></span>\n+                                    {project?.title || 'Unknown Project'}\n+                                </h4>\n+                                <div className=\"space-y-3 border-l-2 pl-4 ml-1\" style={{borderColor: project?.color || '#ccc'}}>\n+                                    {projectTasks.map(item => <TaskCard key={item.id} item={item} users={users} onSelectItem={onSelectItem} />)}\n+                                </div>\n+                            </div>\n+                        )\n+                    })}\n+                    {/* Render standalone tasks */}\n+                    {standaloneTasks.length > 0 && (\n+                        <div>\n+                            {groupedTasks.size > 0 && <h4 className=\"font-bold text-text-primary mb-2 mt-4\">Other Tasks</h4>}\n+                             <div className=\"space-y-3\">\n+                                {standaloneTasks.map(item => <TaskCard key={item.id} item={item} users={users} onSelectItem={onSelectItem} />)}\n+                            </div>\n+                        </div>\n+                    )}\n+                </div>\n+            </div>\n+        ) : overdueItems.length === 0 && (\n+            <div className=\"text-center py-12 border border-dashed border-border-main rounded-lg bg-surface-card/30 mt-4\">\n+              <p className=\"text-text-secondary\">No tasks scheduled for this day.</p>\n+            </div>\n+        )}\n+      </div>\n+    </div>\n+  );\n+};\n+\n+\n+// --- Month View ---\n+interface MonthViewProps {\n+  items: AppItem[];\n+  users: User[];\n+  currentDate: Date;\n+  onSelectItem: (item: AppItem) => void;\n+}\n+\n+const getEffectiveInterval = (item: AppItem): { start: Date, end: Date } => {\n+    if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n+        const task = item as Task;\n+        // A completed task is a single-day event.\n+        const effectiveDate = startOfDay(task.completedOn || item.dueDate);\n+        return { start: effectiveDate, end: endOfDay(effectiveDate) };\n+    }\n+    // For all other tasks, normalize the interval to full days.\n+    return { start: startOfDay(item.createdAt), end: endOfDay(item.dueDate) };\n+};\n+\n+export const MonthView: React.FC<MonthViewProps> = ({ items, currentDate, onSelectItem }) => {\n+  const firstDayOfMonth = startOfMonth(currentDate);\n+  const lastDayOfMonth = endOfMonth(currentDate);\n+\n+  const daysInMonth = eachDayOfInterval({\n+    start: startOfWeek(firstDayOfMonth),\n+    end: endOfWeek(lastDayOfMonth),\n+  });\n+  \n+  const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n+  \n+  const itemsToDisplay = useMemo(() => {\n+    // Only show projects and standalone tasks in the month view\n+    return items.filter(item => item.type === ItemType.PROJECT || (item.type === ItemType.TASK && !item.projectId));\n+  }, [items]);\n+  \n+  const weeks = useMemo(() => {\n+    const dayChunks = [];\n+    for (let i = 0; i < daysInMonth.length; i += 7) {\n+        dayChunks.push(daysInMonth.slice(i, i + 7));\n+    }\n+    return dayChunks;\n+  }, [daysInMonth]);\n+\n+  const weeklyLayouts = useMemo(() => {\n+    return weeks.map(week => {\n+        const weekStart = startOfDay(week[0]);\n+        const weekEnd = endOfDay(week[6]);\n+\n+        const weekItems = itemsToDisplay\n+            .filter(item => areIntervalsOverlapping(getEffectiveInterval(item), { start: weekStart, end: weekEnd }))\n+            .sort((a, b) => {\n+                const aInterval = getEffectiveInterval(a);\n+                const bInterval = getEffectiveInterval(b);\n+                const startDiff = differenceInDays(aInterval.start, bInterval.start);\n+                if (startDiff !== 0) return startDiff;\n+                const durationDiff = differenceInDays(bInterval.end, bInterval.start) - differenceInDays(aInterval.end, aInterval.start);\n+                return durationDiff;\n+            });\n+\n+        const itemSlots = new Map<string, number>();\n+        const occupiedSlots: { start: Date, end: Date }[][] = [];\n+\n+        weekItems.forEach(item => {\n+            const itemInterval = getEffectiveInterval(item);\n+            let slotIndex = 0;\n+            while(true) {\n+                if (!occupiedSlots[slotIndex]) {\n+                    occupiedSlots[slotIndex] = [];\n+                }\n+                const collision = occupiedSlots[slotIndex].some(placedInterval =>\n+                    areIntervalsOverlapping(itemInterval, placedInterval, { inclusive: true })\n+                );\n+                if (!collision) {\n+                    occupiedSlots[slotIndex].push(itemInterval);\n+                    itemSlots.set(item.id, slotIndex);\n+                    break;\n+                }\n+                slotIndex++;\n+            }\n+        });\n+\n+        const layout = weekItems.map(item => {\n+            const { start: itemStart, end: itemEnd } = getEffectiveInterval(item);\n+            const start = isAfter(itemStart, weekStart) ? itemStart : weekStart;\n+            const end = isBefore(itemEnd, weekEnd) ? itemEnd : weekEnd;\n+            const duration = differenceInDays(end, start) + 1;\n+            const offset = differenceInDays(start, weekStart);\n+\n+            return {\n+                item,\n+                slot: itemSlots.get(item.id) || 0,\n+                duration: duration > 0 ? duration : 1,\n+                offset: offset >= 0 ? offset : 0,\n+            };\n+        });\n+        \n+        return {\n+            weekDays: week,\n+            layout,\n+            rowCount: occupiedSlots.length || 1\n+        };\n+    });\n+  }, [weeks, itemsToDisplay]);\n+\n+  return (\n+    <div className=\"p-4 md:p-6 flex flex-col bg-surface-card h-full\">\n+        {/* Weekday Header */}\n+        <div className=\"grid grid-cols-7 shrink-0\">\n+          {weekdays.map(day => (\n+            <div key={day} className=\"text-center font-medium text-text-secondary text-sm py-2 border-b border-r border-border-main last:border-r-0 bg-surface-card\">{day}</div>\n+          ))}\n+        </div>\n+\n+        {/* Calendar Body */}\n+        <div className=\"flex-grow flex flex-col\">\n+            {weeklyLayouts.map(({ weekDays, layout, rowCount }, weekIndex) => (\n+                // Each week row has uniform height (flex-1) and scrolls internally\n+                <div \n+                    key={weekIndex}\n+                    className=\"relative border-b border-border-main flex-1 overflow-y-auto\"\n+                >\n+                    {/* A tall inner \"canvas\" that holds all items. Its height is dynamic. */}\n+                    <div className=\"relative\" style={{ minHeight: `calc(1.75rem + ${rowCount * 1.85}rem)` }}>\n+                        {/* Background day cells */}\n+                        <div className=\"grid grid-cols-7 absolute inset-0\">\n+                            {weekDays.map((day) => {\n+                                const isCurrentMonth = isSameMonth(day, currentDate);\n+                                return (\n+                                    <div key={day.toString()} className={`flex-1 border-r border-border-main last:border-r-0 ${isCurrentMonth ? '' : 'bg-surface-main'}`}></div>\n+                                );\n+                            })}\n+                        </div>\n+                        \n+                        {/* Day numbers (part of the scrollable canvas) */}\n+                        <div className=\"grid grid-cols-7 relative\">\n+                            {weekDays.map(day => {\n+                                const isToday = isSameDay(day, new Date());\n+                                const isCurrentMonth = isSameMonth(day, currentDate);\n+                                return (\n+                                    <div key={day.toString()} className=\"flex-1 p-1.5\">\n+                                         <div className={`text-xs font-semibold ${isToday ? 'bg-brand-primary text-white rounded-full w-6 h-6 flex items-center justify-center' : isCurrentMonth ? 'text-text-primary' : 'text-text-secondary'}`}>\n+                                            {format(day, 'd')}\n+                                        </div>\n+                                    </div>\n+                                );\n+                            })}\n+                        </div>\n+                        \n+                        {/* Positioned task items */}\n+                        {layout.map(({ item, slot, duration, offset }) => {\n+                          const isProject = item.type === ItemType.PROJECT;\n+                          return (\n+                            <div \n+                                key={item.id}\n+                                className=\"absolute h-6 rounded text-white text-xs font-medium flex items-center px-2 overflow-hidden truncate cursor-pointer hover:ring-2 ring-slate-400\"\n+                                onClick={() => onSelectItem(item)}\n+                                title={item.title}\n+                                style={{\n+                                    backgroundColor: item.color,\n+                                    opacity: item.status === ItemStatus.COMPLETED ? 0.7 : 1,\n+                                    top: `calc(1.75rem + ${slot * 1.85}rem)`,\n+                                    left: `calc(${(offset / 7) * 100}%)`,\n+                                    width: `calc(${(duration / 7) * 100}% - 8px)`,\n+                                    zIndex: 10 + slot,\n+                                }}\n+                            >\n+                                {item.status === ItemStatus.COMPLETED && <CheckCircleIcon className=\"w-4 h-4 text-white shrink-0 mr-1\" />}\n+                                {isProject && <ListIcon className=\"w-3 h-3 text-white/80 shrink-0 mr-1.5\" />}\n+                                <span className={`flex-grow truncate ${item.status === ItemStatus.COMPLETED ? 'line-through' : ''}`}>\n+                                  {item.title}\n+                                </span>\n+                                {isProject && <span className=\"text-white/80\">({(item as Project).tasks.length})</span>}\n+                            </div>\n+                          )\n+                        })}\n+                    </div>\n+                </div>\n+            ))}\n+        </div>\n+    </div>\n+  );\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1755076624590,
            "name": "Commit-0",
            "content": "import React, { useMemo } from 'react';\nimport { format } from 'date-fns/format';\nimport { addDays } from 'date-fns/addDays';\nimport { subDays } from 'date-fns/subDays';\nimport { isSameDay } from 'date-fns/isSameDay';\nimport { isWithinInterval } from 'date-fns/isWithinInterval';\nimport { startOfMonth } from 'date-fns/startOfMonth';\nimport { endOfMonth } from 'date-fns/endOfMonth';\nimport { eachDayOfInterval } from 'date-fns/eachDayOfInterval';\nimport { startOfWeek } from 'date-fns/startOfWeek';\nimport { endOfWeek } from 'date-fns/endOfWeek';\nimport { isSameMonth } from 'date-fns/isSameMonth';\nimport { differenceInDays } from 'date-fns/differenceInDays';\nimport { isAfter } from 'date-fns/isAfter';\nimport { isBefore } from 'date-fns/isBefore';\nimport { areIntervalsOverlapping } from 'date-fns/areIntervalsOverlapping';\nimport { startOfDay } from 'date-fns/startOfDay';\nimport { endOfDay } from 'date-fns/endOfDay';\nimport type { AppItem, User, Task } from '../types';\nimport { ItemType, ItemStatus } from '../types'\nimport { ChevronLeftIcon, ChevronRightIcon, CheckCircleIcon } from './Icons';\n\n// Helper to get assignee\nconst getAssignee = (item: AppItem, users: User[]) => users.find(u => u.id === item.assigneeId);\n\nconst statusStyles: { [key in ItemStatus]: { text: string, bg: string } } = {\n    [ItemStatus.TODO]: { text: 'text-amber-800', bg: 'bg-amber-100' },\n    [ItemStatus.IN_PROGRESS]: { text: 'text-blue-800', bg: 'bg-blue-100' },\n    [ItemStatus.COMPLETED]: { text: 'text-green-800', bg: 'bg-green-100' },\n};\n\n// TaskCard Component (Used by Date View)\ninterface TaskCardProps {\n  item: AppItem;\n  users: User[];\n  onSelectItem: (item: AppItem) => void;\n}\nconst TaskCard: React.FC<TaskCardProps> = ({ item, users, onSelectItem }) => {\n  const assignee = getAssignee(item, users);\n  const statusStyle = statusStyles[item.status];\n\n  const getDateInfo = () => {\n    if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n      const task = item as Task;\n      if (task.completedOn) {\n        const overdueText = task.overdueDays && task.overdueDays > 0 \n          ? <span className=\"text-red-500 font-medium ml-2\">({task.overdueDays}d late)</span> \n          : null;\n        return (\n          <span className=\"flex items-center\">\n            Completed: {format(task.completedOn, 'MMM d')}\n            {overdueText}\n          </span>\n        );\n      }\n    }\n    if (item.status !== ItemStatus.COMPLETED && isBefore(item.dueDate, startOfDay(new Date()))) {\n        return <span className=\"text-red-600 font-medium\">Due: {format(item.dueDate, 'MMM d')}</span>;\n    }\n    return <span>Due: {format(item.dueDate, 'MMM d')}</span>;\n  };\n\n  return (\n    <div \n        className=\"bg-surface-card border border-border-main rounded-lg p-4 flex items-center gap-4 transition-all hover:border-brand-primary cursor-pointer shadow-sm hover:shadow-md\"\n        onClick={() => onSelectItem(item)}\n    >\n      <div className=\"flex-grow\">\n        <div className=\"flex items-center gap-2\">\n            <p className={`font-medium ${item.status === ItemStatus.COMPLETED ? 'line-through text-text-secondary' : 'text-text-primary'}`}>{item.title}</p>\n            {item.status === ItemStatus.COMPLETED && <CheckCircleIcon className=\"w-5 h-5 text-green-500 shrink-0\" />}\n        </div>\n        <div className=\"text-sm text-text-secondary flex items-center gap-4 mt-1\">\n          {getDateInfo()}\n          {assignee && <span>To: {assignee.name}</span>}\n          {item.type === ItemType.PROJECT && <span className=\"text-xs font-semibold bg-brand-secondary text-white px-2 py-0.5 rounded-full\">Project</span>}\n        </div>\n      </div>\n      <div className={`px-2 py-1 rounded-full text-xs font-semibold ${statusStyle.bg} ${statusStyle.text}`}>\n          {item.status}\n      </div>\n    </div>\n  );\n};\n\n\n// Date View Component (with 5-day Slider)\ninterface DateViewProps {\n  items: AppItem[];\n  users: User[];\n  currentDate: Date;\n  onSelectItem: (item: AppItem) => void;\n  onVisibleDateChange: (date: Date) => void;\n}\n\nexport const DateView: React.FC<DateViewProps> = ({ items, users, currentDate, onSelectItem, onVisibleDateChange }) => {\n    const todayStart = useMemo(() => startOfDay(new Date()), []);\n    \n    const overdueItems = useMemo(() => {\n        return items\n            .filter(item => \n                item.status !== ItemStatus.COMPLETED && \n                isBefore(item.dueDate, todayStart)\n            )\n            .sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n    }, [items, todayStart]);\n\n    const tasksForSelectedDay = useMemo(() => {\n        return items\n        .filter(item => {\n            const isOverdue = item.status !== ItemStatus.COMPLETED && isBefore(item.dueDate, todayStart);\n            if (isOverdue) return false;\n            \n            // If task is completed, show it on its completion date\n            if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n                const task = item as Task;\n                if (task.completedOn) {\n                    return isSameDay(currentDate, task.completedOn);\n                }\n            }\n            \n            // Otherwise, show it if it's active during the current date\n            return isWithinInterval(currentDate, { start: startOfDay(item.createdAt), end: item.dueDate });\n        })\n        .sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n    }, [items, currentDate, todayStart]);\n\n  const handleDateChange = (newDate: Date) => {\n    onVisibleDateChange(newDate);\n  };\n\n  const displayedDates = useMemo(() => {\n    return Array.from({ length: 5 }, (_, i) => addDays(currentDate, i - 2));\n  }, [currentDate]);\n\n  return (\n    <div className=\"h-full flex flex-col bg-surface-main\">\n      {/* Header with 5-day slider navigation */}\n      <div className=\"p-4 bg-surface-card/50 border-b border-border-main shrink-0\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-semibold text-text-primary\">\n            {format(currentDate, 'EEEE, MMMM d')}\n          </h2>\n          <button onClick={() => handleDateChange(new Date())} className=\"text-sm font-medium text-text-secondary hover:text-text-primary px-3 py-1 border border-border-main rounded-lg hover:bg-surface-card\">\n            Today\n          </button>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button onClick={() => handleDateChange(subDays(currentDate, 1))} className=\"p-2 rounded-full hover:bg-surface-card\" aria-label=\"Previous Day\">\n            <ChevronLeftIcon className=\"w-6 h-6 text-text-secondary\" />\n          </button>\n          \n          <div className=\"flex-grow grid grid-cols-5 gap-2\">\n            {displayedDates.map((day) => {\n              const isSelected = isSameDay(day, currentDate);\n              const isToday = isSameDay(day, new Date());\n              \n              return (\n                <button\n                  key={day.toISOString()}\n                  onClick={() => handleDateChange(day)}\n                  className={`flex flex-col items-center justify-center p-2 rounded-lg transition-colors ${\n                    isSelected\n                      ? 'bg-brand-primary text-white'\n                      : 'hover:bg-surface-card text-text-secondary'\n                  }`}\n                >\n                  <span className=\"text-xs font-semibold uppercase\">{format(day, 'EEE')}</span>\n                  <span className={`text-lg font-bold ${isToday && !isSelected ? 'text-brand-primary' : ''}`}>{format(day, 'd')}</span>\n                </button>\n              );\n            })}\n          </div>\n\n          <button onClick={() => handleDateChange(addDays(currentDate, 1))} className=\"p-2 rounded-full hover:bg-surface-card\" aria-label=\"Next Day\">\n            <ChevronRightIcon className=\"w-6 h-6 text-text-secondary\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Content Area */}\n      <div className=\"flex-grow overflow-y-auto px-4 md:px-6 py-4\">\n        {overdueItems.length > 0 && (\n            <div className=\"mb-6\">\n                <h3 className=\"text-base font-semibold text-red-600 mb-2 uppercase tracking-wider\">Overdue</h3>\n                <div className=\"space-y-3\">\n                    {overdueItems.map(item => <TaskCard key={item.id} item={item} users={users} onSelectItem={onSelectItem} />)}\n                </div>\n            </div>\n        )}\n\n        {overdueItems.length > 0 && tasksForSelectedDay.length > 0 && <hr className=\"border-t border-border-main my-6\" />}\n\n        {tasksForSelectedDay.length > 0 && (\n          <div>\n            <h3 className=\"text-base font-semibold text-text-primary mb-3 uppercase tracking-wider\">\n                Tasks for {format(currentDate, 'MMMM d')}\n            </h3>\n\n            <div className=\"space-y-3\">\n              {tasksForSelectedDay.map(item => <TaskCard key={item.id} item={item} users={users} onSelectItem={onSelectItem} />)}\n            </div>\n          </div>\n        )}\n\n        {tasksForSelectedDay.length === 0 && overdueItems.length === 0 && (\n            <div className=\"text-center py-12 border border-dashed border-border-main rounded-lg bg-surface-card/30 mt-4\">\n              <p className=\"text-text-secondary\">No tasks scheduled for this day.</p>\n            </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n\n// --- Month View ---\ninterface MonthViewProps {\n  items: AppItem[];\n  users: User[];\n  currentDate: Date;\n  onSelectItem: (item: AppItem) => void;\n}\n\nconst getEffectiveInterval = (item: AppItem): { start: Date, end: Date } => {\n    if (item.type === ItemType.TASK && item.status === ItemStatus.COMPLETED) {\n        const task = item as Task;\n        // A completed task is a single-day event.\n        const effectiveDate = startOfDay(task.completedOn || item.dueDate);\n        return { start: effectiveDate, end: endOfDay(effectiveDate) };\n    }\n    // For all other tasks, normalize the interval to full days.\n    return { start: startOfDay(item.createdAt), end: endOfDay(item.dueDate) };\n};\n\nexport const MonthView: React.FC<MonthViewProps> = ({ items, currentDate, onSelectItem }) => {\n  const firstDayOfMonth = startOfMonth(currentDate);\n  const lastDayOfMonth = endOfMonth(currentDate);\n\n  const daysInMonth = eachDayOfInterval({\n    start: startOfWeek(firstDayOfMonth),\n    end: endOfWeek(lastDayOfMonth),\n  });\n  \n  const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  \n  const weeks = useMemo(() => {\n    const dayChunks = [];\n    for (let i = 0; i < daysInMonth.length; i += 7) {\n        dayChunks.push(daysInMonth.slice(i, i + 7));\n    }\n    return dayChunks;\n  }, [daysInMonth]);\n\n  const weeklyLayouts = useMemo(() => {\n    return weeks.map(week => {\n        const weekStart = startOfDay(week[0]);\n        const weekEnd = endOfDay(week[6]);\n\n        const weekItems = items\n            .filter(item => areIntervalsOverlapping(getEffectiveInterval(item), { start: weekStart, end: weekEnd }))\n            .sort((a, b) => {\n                const aInterval = getEffectiveInterval(a);\n                const bInterval = getEffectiveInterval(b);\n                const startDiff = differenceInDays(aInterval.start, bInterval.start);\n                if (startDiff !== 0) return startDiff;\n                const durationDiff = differenceInDays(bInterval.end, bInterval.start) - differenceInDays(aInterval.end, aInterval.start);\n                return durationDiff;\n            });\n\n        const itemSlots = new Map<string, number>();\n        const occupiedSlots: { start: Date, end: Date }[][] = [];\n\n        weekItems.forEach(item => {\n            const itemInterval = getEffectiveInterval(item);\n            let slotIndex = 0;\n            while(true) {\n                if (!occupiedSlots[slotIndex]) {\n                    occupiedSlots[slotIndex] = [];\n                }\n                const collision = occupiedSlots[slotIndex].some(placedInterval =>\n                    areIntervalsOverlapping(itemInterval, placedInterval, { inclusive: true })\n                );\n                if (!collision) {\n                    occupiedSlots[slotIndex].push(itemInterval);\n                    itemSlots.set(item.id, slotIndex);\n                    break;\n                }\n                slotIndex++;\n            }\n        });\n\n        const layout = weekItems.map(item => {\n            const { start: itemStart, end: itemEnd } = getEffectiveInterval(item);\n            const start = isAfter(itemStart, weekStart) ? itemStart : weekStart;\n            const end = isBefore(itemEnd, weekEnd) ? itemEnd : weekEnd;\n            const duration = differenceInDays(end, start) + 1;\n            const offset = differenceInDays(start, weekStart);\n\n            return {\n                item,\n                slot: itemSlots.get(item.id) || 0,\n                duration: duration > 0 ? duration : 1,\n                offset: offset >= 0 ? offset : 0,\n            };\n        });\n        \n        return {\n            weekDays: week,\n            layout,\n            rowCount: occupiedSlots.length || 1\n        };\n    });\n  }, [weeks, items]);\n\n  return (\n    <div className=\"p-4 md:p-6 flex flex-col bg-surface-card h-full\">\n        {/* Weekday Header */}\n        <div className=\"grid grid-cols-7 shrink-0\">\n          {weekdays.map(day => (\n            <div key={day} className=\"text-center font-medium text-text-secondary text-sm py-2 border-b border-r border-border-main last:border-r-0 bg-surface-card\">{day}</div>\n          ))}\n        </div>\n\n        {/* Calendar Body */}\n        <div className=\"flex-grow flex flex-col\">\n            {weeklyLayouts.map(({ weekDays, layout, rowCount }, weekIndex) => (\n                // Each week row has uniform height (flex-1) and scrolls internally\n                <div \n                    key={weekIndex}\n                    className=\"relative border-b border-border-main flex-1 overflow-y-auto\"\n                >\n                    {/* A tall inner \"canvas\" that holds all items. Its height is dynamic. */}\n                    <div className=\"relative\" style={{ minHeight: `calc(1.75rem + ${rowCount * 1.85}rem)` }}>\n                        {/* Background day cells */}\n                        <div className=\"grid grid-cols-7 absolute inset-0\">\n                            {weekDays.map((day) => {\n                                const isCurrentMonth = isSameMonth(day, currentDate);\n                                return (\n                                    <div key={day.toString()} className={`flex-1 border-r border-border-main last:border-r-0 ${isCurrentMonth ? '' : 'bg-surface-main'}`}></div>\n                                );\n                            })}\n                        </div>\n                        \n                        {/* Day numbers (part of the scrollable canvas) */}\n                        <div className=\"grid grid-cols-7 relative\">\n                            {weekDays.map(day => {\n                                const isToday = isSameDay(day, new Date());\n                                const isCurrentMonth = isSameMonth(day, currentDate);\n                                return (\n                                    <div key={day.toString()} className=\"flex-1 p-1.5\">\n                                         <div className={`text-xs font-semibold ${isToday ? 'bg-brand-primary text-white rounded-full w-6 h-6 flex items-center justify-center' : isCurrentMonth ? 'text-text-primary' : 'text-text-secondary'}`}>\n                                            {format(day, 'd')}\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        \n                        {/* Positioned task items */}\n                        {layout.map(({ item, slot, duration, offset }) => (\n                            <div \n                                key={item.id}\n                                className=\"absolute h-6 rounded text-white text-xs font-medium flex items-center px-2 overflow-hidden truncate cursor-pointer hover:ring-2 ring-slate-400\"\n                                onClick={() => onSelectItem(item)}\n                                title={item.title}\n                                style={{\n                                    backgroundColor: item.color,\n                                    opacity: item.status === ItemStatus.COMPLETED ? 0.7 : 1,\n                                    top: `calc(1.75rem + ${slot * 1.85}rem)`,\n                                    left: `calc(${(offset / 7) * 100}%)`,\n                                    width: `calc(${(duration / 7) * 100}% - 8px)`,\n                                    zIndex: 10 + slot,\n                                }}\n                            >\n                                {item.status === ItemStatus.COMPLETED && <CheckCircleIcon className=\"w-4 h-4 text-white shrink-0 mr-1\" />}\n                                <span className={`flex-grow truncate ${item.status === ItemStatus.COMPLETED ? 'line-through' : ''}`}>\n                                {item.title}\n                                </span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ))}\n        </div>\n    </div>\n  );\n};"
        }
    ]
}