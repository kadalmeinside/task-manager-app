{
    "sourceFile": "App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1755098868371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755098924418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n import UserManagementListModal from './components/UserManagementListModal';\n import InstallPWAButton from './components/InstallPWAButton';\n import CreateItemModal from './components/CreateItemModal';\n import { AppSkeleton } from './components/Skeleton';\n-import LogPage from './components/LogPage';\n \n+\n import { auth, db, firestore } from './firebase';\n import firebase from 'firebase/compat/app';\n \n \n"
                },
                {
                    "date": 1755098930466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n import UserManagementListModal from './components/UserManagementListModal';\n import InstallPWAButton from './components/InstallPWAButton';\n import CreateItemModal from './components/CreateItemModal';\n import { AppSkeleton } from './components/Skeleton';\n+import LogPage from './components/LogPage';\n \n-\n import { auth, db, firestore } from './firebase';\n import firebase from 'firebase/compat/app';\n \n \n"
                },
                {
                    "date": 1755099299007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,12 +101,18 @@\n           setCurrentUser({ id: userDocSnap.id, ...userDocSnap.data() } as User);\n         } else {\n           console.error(\"No user document found for logged-in user! Logging out.\");\n           await auth.signOut();\n-          setCurrentUser(null);\n         }\n       } else {\n+        // When user logs out, reset all user-specific data to ensure no data leaks between sessions.\n         setCurrentUser(null);\n+        setUsers(null);\n+        setItems(null);\n+        setLogs([]);\n+        setLastLogDoc(null);\n+        setHasMoreLogs(true);\n+        setActiveView('dashboard');\n       }\n       setAuthResolved(true);\n     });\n     return () => unsubscribe();\n@@ -185,15 +191,21 @@\n     }\n   };\n \n   const fetchLogs = async (loadMore = false) => {\n-    if (isLoadingMoreLogs) return;\n+    if (isLoadingMoreLogs || !currentUser) return;\n     setIsLoadingMoreLogs(true);\n \n-    let query = db.collection('activity_logs')\n-                  .orderBy('timestamp', 'desc')\n-                  .limit(LOGS_PER_PAGE);\n+    let query: firebase.firestore.Query = db.collection('activity_logs')\n+                  .orderBy('timestamp', 'desc');\n+\n+    // Filter logs by userId if the current user is Staff\n+    if (currentUser.role === Role.STAFF) {\n+        query = query.where('userId', '==', currentUser.id);\n+    }\n     \n+    query = query.limit(LOGS_PER_PAGE);\n+    \n     if (loadMore && lastLogDoc) {\n       query = query.startAfter(lastLogDoc);\n     }\n \n@@ -208,10 +220,13 @@\n       setLogs(prev => loadMore ? [...prev, ...fetchedLogs] : fetchedLogs);\n       setLastLogDoc(snapshot.docs[snapshot.docs.length - 1]);\n       setHasMoreLogs(snapshot.docs.length === LOGS_PER_PAGE);\n \n-    } catch (error) {\n+    } catch (error: any) {\n       console.error(\"Error fetching logs:\", error);\n+      if (error.code === 'failed-precondition' && error.message.includes('index')) {\n+        console.error(\"FIRESTORE HINT: The current query requires a composite index for staff members to filter logs. Please create it in your Firebase console. The required index is on the 'activity_logs' collection, with fields 'userId' (Ascending) and 'timestamp' (Descending).\");\n+      }\n     } finally {\n       setIsLoadingMoreLogs(false);\n     }\n   };\n@@ -436,5 +451,5 @@\n     </div>\n   );\n };\n \n-export default App;\n\\ No newline at end of file\n+export default App;\n"
                },
                {
                    "date": 1755099597480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n   const [logs, setLogs] = useState<ActivityLog[]>([]);\n   const [lastLogDoc, setLastLogDoc] = useState<firebase.firestore.DocumentSnapshot | null>(null);\n   const [isLoadingMoreLogs, setIsLoadingMoreLogs] = useState(false);\n   const [hasMoreLogs, setHasMoreLogs] = useState(true);\n+  const [logIndexError, setLogIndexError] = useState(false);\n \n   // Initialize Super Admin on first load\n   useEffect(() => {\n     const initializeSuperAdmin = async () => {\n@@ -111,8 +112,9 @@\n         setLogs([]);\n         setLastLogDoc(null);\n         setHasMoreLogs(true);\n         setActiveView('dashboard');\n+        setLogIndexError(false);\n       }\n       setAuthResolved(true);\n     });\n     return () => unsubscribe();\n@@ -193,8 +195,11 @@\n \n   const fetchLogs = async (loadMore = false) => {\n     if (isLoadingMoreLogs || !currentUser) return;\n     setIsLoadingMoreLogs(true);\n+    if (!loadMore) {\n+        setLogIndexError(false);\n+    }\n \n     let query: firebase.firestore.Query = db.collection('activity_logs')\n                   .orderBy('timestamp', 'desc');\n \n@@ -223,8 +228,10 @@\n \n     } catch (error: any) {\n       console.error(\"Error fetching logs:\", error);\n       if (error.code === 'failed-precondition' && error.message.includes('index')) {\n+        setLogIndexError(true);\n+        setLogs([]);\n         console.error(\"FIRESTORE HINT: The current query requires a composite index for staff members to filter logs. Please create it in your Firebase console. The required index is on the 'activity_logs' collection, with fields 'userId' (Ascending) and 'timestamp' (Descending).\");\n       }\n     } finally {\n       setIsLoadingMoreLogs(false);\n@@ -376,8 +383,9 @@\n           onLoadMore={() => fetchLogs(true)}\n           isLoadingMore={isLoadingMoreLogs}\n           hasMore={hasMoreLogs}\n           onGoBack={() => setActiveView('dashboard')}\n+          indexError={logIndexError}\n         />\n       ) : (\n         <>\n           <div className=\"p-4 bg-surface-card border-b border-border-main flex flex-col md:flex-row items-center justify-between gap-y-4 gap-x-2 sticky top-[68px] z-20 shrink-0\">\n"
                },
                {
                    "date": 1755099852007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n   const [logs, setLogs] = useState<ActivityLog[]>([]);\n   const [lastLogDoc, setLastLogDoc] = useState<firebase.firestore.DocumentSnapshot | null>(null);\n   const [isLoadingMoreLogs, setIsLoadingMoreLogs] = useState(false);\n   const [hasMoreLogs, setHasMoreLogs] = useState(true);\n-  const [logIndexError, setLogIndexError] = useState(false);\n \n   // Initialize Super Admin on first load\n   useEffect(() => {\n     const initializeSuperAdmin = async () => {\n@@ -112,9 +111,8 @@\n         setLogs([]);\n         setLastLogDoc(null);\n         setHasMoreLogs(true);\n         setActiveView('dashboard');\n-        setLogIndexError(false);\n       }\n       setAuthResolved(true);\n     });\n     return () => unsubscribe();\n@@ -195,11 +193,8 @@\n \n   const fetchLogs = async (loadMore = false) => {\n     if (isLoadingMoreLogs || !currentUser) return;\n     setIsLoadingMoreLogs(true);\n-    if (!loadMore) {\n-        setLogIndexError(false);\n-    }\n \n     let query: firebase.firestore.Query = db.collection('activity_logs')\n                   .orderBy('timestamp', 'desc');\n \n@@ -227,13 +222,8 @@\n       setHasMoreLogs(snapshot.docs.length === LOGS_PER_PAGE);\n \n     } catch (error: any) {\n       console.error(\"Error fetching logs:\", error);\n-      if (error.code === 'failed-precondition' && error.message.includes('index')) {\n-        setLogIndexError(true);\n-        setLogs([]);\n-        console.error(\"FIRESTORE HINT: The current query requires a composite index for staff members to filter logs. Please create it in your Firebase console. The required index is on the 'activity_logs' collection, with fields 'userId' (Ascending) and 'timestamp' (Descending).\");\n-      }\n     } finally {\n       setIsLoadingMoreLogs(false);\n     }\n   };\n@@ -383,9 +373,8 @@\n           onLoadMore={() => fetchLogs(true)}\n           isLoadingMore={isLoadingMoreLogs}\n           hasMore={hasMoreLogs}\n           onGoBack={() => setActiveView('dashboard')}\n-          indexError={logIndexError}\n         />\n       ) : (\n         <>\n           <div className=\"p-4 bg-surface-card border-b border-border-main flex flex-col md:flex-row items-center justify-between gap-y-4 gap-x-2 sticky top-[68px] z-20 shrink-0\">\n"
                },
                {
                    "date": 1755100343237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n \n+\n import React, { useState, useMemo, useEffect } from 'react';\n import { format } from 'date-fns/format';\n import { subMonths } from 'date-fns/subMonths';\n import { addMonths } from 'date-fns/addMonths';\n@@ -48,9 +49,11 @@\n   const [logs, setLogs] = useState<ActivityLog[]>([]);\n   const [lastLogDoc, setLastLogDoc] = useState<firebase.firestore.DocumentSnapshot | null>(null);\n   const [isLoadingMoreLogs, setIsLoadingMoreLogs] = useState(false);\n   const [hasMoreLogs, setHasMoreLogs] = useState(true);\n+  const [logIndexError, setLogIndexError] = useState(false);\n \n+\n   // Initialize Super Admin on first load\n   useEffect(() => {\n     const initializeSuperAdmin = async () => {\n       // Use a flag in localStorage to ensure this only runs once per browser.\n@@ -111,8 +114,9 @@\n         setLogs([]);\n         setLastLogDoc(null);\n         setHasMoreLogs(true);\n         setActiveView('dashboard');\n+        setLogIndexError(false);\n       }\n       setAuthResolved(true);\n     });\n     return () => unsubscribe();\n@@ -167,12 +171,12 @@\n   }, [currentUser]);\n   \n   // Fetch initial logs when view changes\n   useEffect(() => {\n-    if (activeView === 'log' && logs.length === 0) {\n+    if (activeView === 'log' && currentUser) {\n       fetchLogs();\n     }\n-  }, [activeView]);\n+  }, [activeView, currentUser]);\n \n   const staffList = useMemo(() => (users || []).filter(u => u.role === Role.STAFF), [users]);\n \n   // --- LOGGING ---\n@@ -192,8 +196,14 @@\n   };\n \n   const fetchLogs = async (loadMore = false) => {\n     if (isLoadingMoreLogs || !currentUser) return;\n+    \n+    if (!loadMore) {\n+        setLogIndexError(false); // Reset error on a fresh fetch/retry.\n+        setLogs([]); // Clear stale logs\n+    }\n+\n     setIsLoadingMoreLogs(true);\n \n     let query: firebase.firestore.Query = db.collection('activity_logs')\n                   .orderBy('timestamp', 'desc');\n@@ -221,9 +231,16 @@\n       setLastLogDoc(snapshot.docs[snapshot.docs.length - 1]);\n       setHasMoreLogs(snapshot.docs.length === LOGS_PER_PAGE);\n \n     } catch (error: any) {\n-      console.error(\"Error fetching logs:\", error);\n+      if (error.code === 'failed-precondition') {\n+          console.error(\"FIRESTORE HINT: The current query requires a composite index for staff members to filter logs. Please create it in your Firebase console. The required index is on the 'activity_logs' collection, with fields 'userId' (Ascending) and 'timestamp' (Descending).\", error);\n+          setLogIndexError(true);\n+          setLogs([]);\n+          setHasMoreLogs(false);\n+      } else {\n+        console.error(\"Error fetching logs:\", error);\n+      }\n     } finally {\n       setIsLoadingMoreLogs(false);\n     }\n   };\n@@ -373,8 +390,10 @@\n           onLoadMore={() => fetchLogs(true)}\n           isLoadingMore={isLoadingMoreLogs}\n           hasMore={hasMoreLogs}\n           onGoBack={() => setActiveView('dashboard')}\n+          indexError={logIndexError}\n+          onRetry={() => fetchLogs(false)}\n         />\n       ) : (\n         <>\n           <div className=\"p-4 bg-surface-card border-b border-border-main flex flex-col md:flex-row items-center justify-between gap-y-4 gap-x-2 sticky top-[68px] z-20 shrink-0\">\n@@ -404,49 +423,64 @@\n                             md:static md:flex md:items-center md:gap-2 md:rounded-lg md:p-0 md:py-2 md:px-4 md:shadow-none\"\n                   aria-label=\"Add or Assign Task\"\n                 >\n                   <PlusIcon className=\"h-6 w-6 md:h-5 md:w-5\" />\n-                  <span className=\"hidden md:inline\">\n-                    {currentUser.role === Role.DIRECTOR ? 'Assign' : 'Add'} Task\n-                  </span>\n+                  <span className=\"hidden md:inline\">Add Task</span>\n                 </button>\n             </div>\n           </div>\n-\n-          <main className=\"flex-grow overflow-y-auto\">\n-            {view === 'date' ? (\n-              <DateView items={items} users={users} currentDate={currentDate} onVisibleDateChange={setCurrentDate} onSelectItem={setSelectedItem} />\n+          \n+          <main className=\"flex-grow overflow-hidden\">\n+            {view === 'month' ? (\n+              <MonthView items={items} users={users} currentDate={currentDate} onSelectItem={setSelectedItem} />\n             ) : (\n-              <MonthView items={items} users={users} currentDate={currentDate} onSelectItem={setSelectedItem} />\n+              <DateView items={items} users={users} currentDate={currentDate} onSelectItem={setSelectedItem} onVisibleDateChange={setCurrentDate} />\n             )}\n           </main>\n         </>\n       )}\n+\n+      <CreateItemModal \n+        isOpen={isCreateModalOpen}\n+        onClose={() => setCreateModalOpen(false)}\n+        onSubmit={handleCreateItem}\n+        currentUser={currentUser}\n+        staffList={staffList}\n+        items={items}\n+      />\n+\n+      <TaskDetailModal \n+        isOpen={!!selectedItem}\n+        item={selectedItem}\n+        allItems={items}\n+        users={users}\n+        currentUser={currentUser}\n+        onClose={() => setSelectedItem(null)}\n+        onUpdate={handleUpdateItem}\n+        onSelectItem={setSelectedItem}\n+      />\n       \n-      <CreateItemModal isOpen={isCreateModalOpen} onClose={() => setCreateModalOpen(false)} onSubmit={handleCreateItem} currentUser={currentUser} staffList={staffList} items={items} />\n-      \n-      <TaskDetailModal item={selectedItem} allItems={items} users={users} currentUser={currentUser} isOpen={!!selectedItem} onClose={() => setSelectedItem(null)} onUpdate={handleUpdateItem} onSelectItem={setSelectedItem} />\n-\n       {currentUser.role === Role.SUPER_ADMIN && (\n         <>\n-          <UserManagementListModal\n-            isOpen={isUserListModalOpen}\n-            onClose={() => setUserListModalOpen(false)}\n-            onOpenCreateModal={() => {\n-              setUserListModalOpen(false);\n-              setCreateUserModalOpen(true);\n-            }}\n-            users={users}\n-          />\n-          <CreateUserModal\n-            isOpen={isCreateUserModalOpen}\n-            onClose={() => setCreateUserModalOpen(false)}\n-            onCreateUser={handleCreateUser}\n-          />\n+            <UserManagementListModal \n+                isOpen={isUserListModalOpen}\n+                onClose={() => setUserListModalOpen(false)}\n+                users={users}\n+                onOpenCreateModal={() => {\n+                    setUserListModalOpen(false);\n+                    setCreateUserModalOpen(true);\n+                }}\n+            />\n+            <CreateUserModal \n+                isOpen={isCreateUserModalOpen}\n+                onClose={() => setCreateUserModalOpen(false)}\n+                onCreateUser={handleCreateUser}\n+            />\n         </>\n       )}\n+\n       <InstallPWAButton />\n     </div>\n   );\n };\n \n-export default App;\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755101967323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import { DateView, MonthView } from './components/CalendarViews';\n import CreateUserModal from './components/CreateUserModal';\n import LoginPage from './components/LoginPage';\n import TaskDetailModal from './components/TaskDetailModal';\n-import { PlusIcon, CalendarIcon, ListIcon, ChevronLeftIcon, ChevronRightIcon } from './components/Icons';\n+import { PlusIcon, CalendarIcon, ListIcon, ChevronLeftIcon, ChevronRightIcon, HistoryIcon } from './components/Icons';\n import UserManagementListModal from './components/UserManagementListModal';\n import InstallPWAButton from './components/InstallPWAButton';\n import CreateItemModal from './components/CreateItemModal';\n import { AppSkeleton } from './components/Skeleton';\n@@ -413,8 +413,11 @@\n                     </button>\n                     <button onClick={() => setView('date')} className={`px-3 py-1 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${ view === 'date' ? 'bg-brand-primary text-white shadow' : 'text-text-secondary hover:bg-surface-card' }`}>\n                         <ListIcon className=\"w-5 h-5\" /> Date\n                     </button>\n+                    <button onClick={() => setActiveView('log')} className=\"px-3 py-1 rounded-md text-sm font-medium transition-colors flex items-center gap-2 text-text-secondary hover:bg-surface-card\">\n+                        <HistoryIcon className=\"w-5 h-5\" /> Log\n+                    </button>\n                 </div>\n \n                 <button\n                   onClick={() => setCreateModalOpen(true)}\n"
                }
            ],
            "date": 1755098868370,
            "name": "Commit-0",
            "content": "\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { format } from 'date-fns/format';\nimport { subMonths } from 'date-fns/subMonths';\nimport { addMonths } from 'date-fns/addMonths';\nimport { differenceInDays } from 'date-fns/differenceInDays';\nimport { isBefore } from 'date-fns/isBefore';\nimport { startOfDay } from 'date-fns/startOfDay';\nimport type { User, AppItem, Task, ActivityLog } from './types';\nimport { Role, ItemType, ItemStatus, LogActionType } from './types';\nimport Header from './components/Header';\nimport { DateView, MonthView } from './components/CalendarViews';\nimport CreateUserModal from './components/CreateUserModal';\nimport LoginPage from './components/LoginPage';\nimport TaskDetailModal from './components/TaskDetailModal';\nimport { PlusIcon, CalendarIcon, ListIcon, ChevronLeftIcon, ChevronRightIcon } from './components/Icons';\nimport UserManagementListModal from './components/UserManagementListModal';\nimport InstallPWAButton from './components/InstallPWAButton';\nimport CreateItemModal from './components/CreateItemModal';\nimport { AppSkeleton } from './components/Skeleton';\nimport LogPage from './components/LogPage';\n\nimport { auth, db, firestore } from './firebase';\nimport firebase from 'firebase/compat/app';\n\n\nconst PALETTE = ['#0891b2', '#059669', '#6d28d9', '#be185d', '#c2410c'];\nconst LOGS_PER_PAGE = 20;\n\n// --- APP COMPONENT ---\nconst App: React.FC = () => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isAuthResolved, setAuthResolved] = useState(false);\n  const [loginError, setLoginError] = useState('');\n  \n  const [users, setUsers] = useState<User[] | null>(null);\n  const [items, setItems] = useState<AppItem[] | null>(null);\n  \n  const [currentDate, setCurrentDate] = useState<Date>(new Date());\n  const [view, setView] = useState<'month' | 'date'>('month');\n  const [isCreateModalOpen, setCreateModalOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<AppItem | null>(null);\n  const [isUserListModalOpen, setUserListModalOpen] = useState(false);\n  const [isCreateUserModalOpen, setCreateUserModalOpen] = useState(false);\n  \n  // New state for Log page\n  const [activeView, setActiveView] = useState<'dashboard' | 'log'>('dashboard');\n  const [logs, setLogs] = useState<ActivityLog[]>([]);\n  const [lastLogDoc, setLastLogDoc] = useState<firebase.firestore.DocumentSnapshot | null>(null);\n  const [isLoadingMoreLogs, setIsLoadingMoreLogs] = useState(false);\n  const [hasMoreLogs, setHasMoreLogs] = useState(true);\n\n  // Initialize Super Admin on first load\n  useEffect(() => {\n    const initializeSuperAdmin = async () => {\n      // Use a flag in localStorage to ensure this only runs once per browser.\n      if (localStorage.getItem('super_admin_initialized_v2')) return;\n  \n      const superAdminEmail = 'superadmin@test.com';\n      const superAdminPassword = 'password123';\n      \n      try {\n        // This will throw an error if the user already exists, which is what we want.\n        const userCredential = await auth.createUserWithEmailAndPassword(superAdminEmail, superAdminPassword);\n        const user = userCredential.user;\n\n        // If creation succeeds, create the corresponding Firestore document.\n        if (user) {\n            const userDocRef = db.collection('users').doc(user.uid);\n            await userDocRef.set({\n              name: 'Super Admin',\n              email: superAdminEmail,\n              role: Role.SUPER_ADMIN,\n            });\n            console.log(\"Super Admin account created successfully.\");\n            // Immediately sign the new user out so the login screen is presented.\n            await auth.signOut();\n        }\n      } catch (error: any) {\n        if (error.code === 'auth/email-already-in-use') {\n          console.log(\"Super Admin account already exists in Firebase Auth.\");\n        } else if (error.code !== 'auth/operation-not-allowed') { // Ignore error if email/pass auth is not enabled yet\n          console.error(\"Error initializing Super Admin:\", error);\n        }\n      } finally {\n        // Mark as initialized to prevent re-running.\n        localStorage.setItem('super_admin_initialized_v2', 'true');\n      }\n    };\n  \n    initializeSuperAdmin();\n  }, []);\n  \n  // Auth state listener\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async (firebaseUser) => {\n      if (firebaseUser) {\n        const userDocRef = db.collection('users').doc(firebaseUser.uid);\n        const userDocSnap = await userDocRef.get();\n        if (userDocSnap.exists) {\n          setCurrentUser({ id: userDocSnap.id, ...userDocSnap.data() } as User);\n        } else {\n          console.error(\"No user document found for logged-in user! Logging out.\");\n          await auth.signOut();\n          setCurrentUser(null);\n        }\n      } else {\n        setCurrentUser(null);\n      }\n      setAuthResolved(true);\n    });\n    return () => unsubscribe();\n  }, []);\n  \n  // User list listener\n  useEffect(() => {\n    if (!currentUser) {\n      setUsers(null);\n      return;\n    }\n    // All authenticated users get the full user list.\n    // UI components are already responsible for handling permissions.\n    const usersCollectionRef = db.collection('users');\n    const unsubscribe = usersCollectionRef.onSnapshot((snapshot) => {\n      const usersList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as User));\n      setUsers(usersList);\n    });\n    return () => unsubscribe();\n  }, [currentUser]);\n  \n  // Items listener\n  useEffect(() => {\n    if (!currentUser) {\n      setItems(null);\n      return;\n    }\n    \n    const itemsCollectionRef = db.collection('items');\n    let itemsQuery: firebase.firestore.Query;\n    \n    if (currentUser.role === Role.DIRECTOR || currentUser.role === Role.SUPER_ADMIN) {\n      itemsQuery = itemsCollectionRef;\n    } else { // Staff\n      itemsQuery = itemsCollectionRef.where('assigneeId', '==', currentUser.id);\n    }\n    \n    const unsubscribe = itemsQuery.onSnapshot((snapshot) => {\n      const itemsList = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data,\n          createdAt: (data.createdAt as firebase.firestore.Timestamp).toDate(),\n          dueDate: (data.dueDate as firebase.firestore.Timestamp).toDate(),\n          completedOn: data.completedOn ? (data.completedOn as firebase.firestore.Timestamp).toDate() : undefined,\n        } as AppItem;\n      });\n      setItems(itemsList);\n    });\n    return () => unsubscribe();\n  }, [currentUser]);\n  \n  // Fetch initial logs when view changes\n  useEffect(() => {\n    if (activeView === 'log' && logs.length === 0) {\n      fetchLogs();\n    }\n  }, [activeView]);\n\n  const staffList = useMemo(() => (users || []).filter(u => u.role === Role.STAFF), [users]);\n\n  // --- LOGGING ---\n  const logActivity = async (action: LogActionType, details: ActivityLog['details']) => {\n    if (!currentUser) return;\n    try {\n      await db.collection('activity_logs').add({\n        action,\n        details,\n        userId: currentUser.id,\n        userName: currentUser.name,\n        timestamp: firestore.Timestamp.fromDate(new Date()),\n      });\n    } catch (error) {\n      console.error(\"Failed to log activity:\", error);\n    }\n  };\n\n  const fetchLogs = async (loadMore = false) => {\n    if (isLoadingMoreLogs) return;\n    setIsLoadingMoreLogs(true);\n\n    let query = db.collection('activity_logs')\n                  .orderBy('timestamp', 'desc')\n                  .limit(LOGS_PER_PAGE);\n    \n    if (loadMore && lastLogDoc) {\n      query = query.startAfter(lastLogDoc);\n    }\n\n    try {\n      const snapshot = await query.get();\n      const fetchedLogs = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        timestamp: (doc.data().timestamp as firebase.firestore.Timestamp).toDate(),\n      } as ActivityLog));\n      \n      setLogs(prev => loadMore ? [...prev, ...fetchedLogs] : fetchedLogs);\n      setLastLogDoc(snapshot.docs[snapshot.docs.length - 1]);\n      setHasMoreLogs(snapshot.docs.length === LOGS_PER_PAGE);\n\n    } catch (error) {\n      console.error(\"Error fetching logs:\", error);\n    } finally {\n      setIsLoadingMoreLogs(false);\n    }\n  };\n\n  const handleLogin = async (email: string, password: string) => {\n    setLoginError('');\n    try {\n      await auth.signInWithEmailAndPassword(email, password);\n    } catch (error: any) {\n      setLoginError(error.message || 'Invalid email or password.');\n      throw error;\n    }\n  };\n\n  const handleLogout = async () => {\n    await auth.signOut();\n  };\n  \n  const handleCreateUser = async (details: { name: string; email: string; pass: string; role: Role; }) => {\n      let tempApp: firebase.app.App | undefined;\n      try {\n          tempApp = firebase.initializeApp({ ...auth.app.options }, 'temp-user-creation');\n          const userCredential = await tempApp.auth().createUserWithEmailAndPassword(details.email, details.pass);\n          const newUser = userCredential.user;\n\n          if (newUser) {\n            await db.collection('users').doc(newUser.uid).set({\n                name: details.name,\n                email: details.email,\n                role: details.role,\n            });\n            logActivity(LogActionType.CREATE_USER, {\n                newUserName: details.name,\n                newUserRole: details.role,\n            });\n          }\n      } catch (error: any) {\n          console.error(\"Error creating user:\", error);\n          throw new Error(error.message || \"Could not create user.\");\n      } finally {\n        if (tempApp) {\n          await tempApp.delete();\n        }\n      }\n  };\n\n  const handleCreateItem = async (newItemData: Omit<AppItem, 'id' | 'createdAt' | 'color'>) => {\n    const commonProps = {\n      createdAt: firestore.Timestamp.fromDate(new Date()),\n      color: PALETTE[(items || []).length % PALETTE.length],\n    };\n    \n    const dataToSave: any = {\n        ...newItemData,\n        ...commonProps,\n        dueDate: firestore.Timestamp.fromDate(newItemData.dueDate)\n    };\n    \n    const docRef = await db.collection('items').add(dataToSave);\n    \n    // If a task was created and assigned to a project, update the project's task list\n    if (dataToSave.type === ItemType.TASK && dataToSave.projectId) {\n        const projectRef = db.collection('items').doc(dataToSave.projectId);\n        await projectRef.update({\n            tasks: firestore.FieldValue.arrayUnion(docRef.id)\n        });\n    }\n\n    const assigneeName = users?.find(u => u.id === dataToSave.assigneeId)?.name || 'Unknown';\n    logActivity(LogActionType.CREATE_ITEM, {\n        itemTitle: dataToSave.title,\n        itemType: dataToSave.type,\n        assigneeName,\n        itemId: docRef.id,\n    });\n  };\n\n  const handleUpdateItem = async (updatedItemData: AppItem) => {\n    const originalItem = items?.find(i => i.id === updatedItemData.id);\n    if (!originalItem) return;\n\n    // Log status change\n    if (originalItem.status !== updatedItemData.status) {\n        logActivity(LogActionType.UPDATE_ITEM_STATUS, {\n            itemId: originalItem.id,\n            itemTitle: originalItem.title,\n            oldStatus: originalItem.status,\n            newStatus: updatedItemData.status,\n        });\n    }\n\n    let finalUpdatedData: any = { ...updatedItemData };\n    delete finalUpdatedData.id; // Don't save id in the document body\n\n    const isCompletingTask =\n        finalUpdatedData.type === ItemType.TASK &&\n        finalUpdatedData.status === ItemStatus.COMPLETED &&\n        originalItem.status !== ItemStatus.COMPLETED;\n\n    if (isCompletingTask) {\n        const task = finalUpdatedData as Task;\n        const completionDate = new Date();\n        task.completedOn = completionDate;\n        \n        if (isBefore(startOfDay(task.dueDate), startOfDay(completionDate))) {\n            task.overdueDays = differenceInDays(startOfDay(completionDate), startOfDay(task.dueDate));\n        } else {\n            task.overdueDays = 0;\n        }\n    }\n    \n    // Convert Dates to Timestamps before saving\n    finalUpdatedData.createdAt = firestore.Timestamp.fromDate(finalUpdatedData.createdAt);\n    finalUpdatedData.dueDate = firestore.Timestamp.fromDate(finalUpdatedData.dueDate);\n    if (finalUpdatedData.completedOn) {\n        finalUpdatedData.completedOn = firestore.Timestamp.fromDate(finalUpdatedData.completedOn);\n    } else {\n        delete finalUpdatedData.completedOn; // FIX: Prevent sending 'undefined' to Firestore\n    }\n    \n    const itemDocRef = db.collection('items').doc(updatedItemData.id);\n    await itemDocRef.update(finalUpdatedData);\n  };\n\n  const showLogin = isAuthResolved && !currentUser;\n  if (showLogin) {\n    return <LoginPage onLogin={handleLogin} error={loginError} />;\n  }\n  \n  const isAppReady = currentUser && users && items;\n  if (!isAppReady) {\n    return <AppSkeleton />;\n  }\n\n  return (\n    <div className=\"bg-surface-main text-text-primary min-h-screen font-sans flex flex-col h-screen\">\n      <Header\n        user={currentUser}\n        onLogout={handleLogout}\n        onManageUsers={() => setUserListModalOpen(true)}\n        onGoToLog={() => setActiveView('log')}\n      />\n\n      {activeView === 'log' ? (\n        <LogPage\n          logs={logs}\n          onLoadMore={() => fetchLogs(true)}\n          isLoadingMore={isLoadingMoreLogs}\n          hasMore={hasMoreLogs}\n          onGoBack={() => setActiveView('dashboard')}\n        />\n      ) : (\n        <>\n          <div className=\"p-4 bg-surface-card border-b border-border-main flex flex-col md:flex-row items-center justify-between gap-y-4 gap-x-2 sticky top-[68px] z-20 shrink-0\">\n            <div className=\"flex items-center justify-between md:justify-start w-full md:w-auto\">\n              <h2 className=\"text-2xl font-bold text-text-primary\">{format(currentDate, 'MMMM yyyy')}</h2>\n                <div className=\"flex items-center gap-2 ml-4\">\n                    <button onClick={() => setCurrentDate(subMonths(currentDate, 1))} className=\"p-2 rounded-full hover:bg-slate-200\"><ChevronLeftIcon className=\"w-6 h-6 text-text-secondary\" /></button>\n                    <button onClick={() => setCurrentDate(new Date())} className=\"text-sm font-medium text-text-secondary hover:text-text-primary px-3 py-1 border border-border-main rounded-lg hover:bg-slate-200\">Today</button>\n                    <button onClick={() => setCurrentDate(addMonths(currentDate, 1))} className=\"p-2 rounded-full hover:bg-slate-200\"><ChevronRightIcon className=\"w-6 h-6 text-text-secondary\" /></button>\n                </div>\n            </div>\n\n            <div className=\"flex items-center justify-between md:justify-end w-full md:w-auto gap-4\">\n                <div className=\"flex items-center bg-surface-main p-1 rounded-lg\">\n                    <button onClick={() => setView('month')} className={`px-3 py-1 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${ view === 'month' ? 'bg-brand-primary text-white shadow' : 'text-text-secondary hover:bg-surface-card' }`}>\n                        <CalendarIcon className=\"w-5 h-5\" /> Month\n                    </button>\n                    <button onClick={() => setView('date')} className={`px-3 py-1 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${ view === 'date' ? 'bg-brand-primary text-white shadow' : 'text-text-secondary hover:bg-surface-card' }`}>\n                        <ListIcon className=\"w-5 h-5\" /> Date\n                    </button>\n                </div>\n\n                <button\n                  onClick={() => setCreateModalOpen(true)}\n                  className=\"bg-brand-primary hover:bg-brand-secondary text-white font-bold transition-all shadow-lg\n                            fixed bottom-6 right-6 z-40 rounded-full p-4 \n                            md:static md:flex md:items-center md:gap-2 md:rounded-lg md:p-0 md:py-2 md:px-4 md:shadow-none\"\n                  aria-label=\"Add or Assign Task\"\n                >\n                  <PlusIcon className=\"h-6 w-6 md:h-5 md:w-5\" />\n                  <span className=\"hidden md:inline\">\n                    {currentUser.role === Role.DIRECTOR ? 'Assign' : 'Add'} Task\n                  </span>\n                </button>\n            </div>\n          </div>\n\n          <main className=\"flex-grow overflow-y-auto\">\n            {view === 'date' ? (\n              <DateView items={items} users={users} currentDate={currentDate} onVisibleDateChange={setCurrentDate} onSelectItem={setSelectedItem} />\n            ) : (\n              <MonthView items={items} users={users} currentDate={currentDate} onSelectItem={setSelectedItem} />\n            )}\n          </main>\n        </>\n      )}\n      \n      <CreateItemModal isOpen={isCreateModalOpen} onClose={() => setCreateModalOpen(false)} onSubmit={handleCreateItem} currentUser={currentUser} staffList={staffList} items={items} />\n      \n      <TaskDetailModal item={selectedItem} allItems={items} users={users} currentUser={currentUser} isOpen={!!selectedItem} onClose={() => setSelectedItem(null)} onUpdate={handleUpdateItem} onSelectItem={setSelectedItem} />\n\n      {currentUser.role === Role.SUPER_ADMIN && (\n        <>\n          <UserManagementListModal\n            isOpen={isUserListModalOpen}\n            onClose={() => setUserListModalOpen(false)}\n            onOpenCreateModal={() => {\n              setUserListModalOpen(false);\n              setCreateUserModalOpen(true);\n            }}\n            users={users}\n          />\n          <CreateUserModal\n            isOpen={isCreateUserModalOpen}\n            onClose={() => setCreateUserModalOpen(false)}\n            onCreateUser={handleCreateUser}\n          />\n        </>\n      )}\n      <InstallPWAButton />\n    </div>\n  );\n};\n\nexport default App;"
        }
    ]
}